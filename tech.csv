name,ring,quadrant,isNew,description
Cypress,adopt,tools,TRUE,"<p>We keep receiving positive feedback on ""post-Selenium"" web UI testing tools such as <strong><a href=""http://www.cypress.io/"">Cypress</a></strong>, <a href=""/radar/tools/testcafe"">TestCafe</a> and <a href=""/radar/languages-and-frameworks/puppeteer"">Puppeteer</a>. Running end-to-end tests can present challenges, such as the long duration of the running process, the flakiness of some tests and the challenges of fixing failures in CI when running tests in headless mode. Our teams have had very good experiences with Cypress by solving common issues such as lack of performance and long wait time for responses and resources to load. Cypress has become the tool of choice for end-to-end testing within our teams.</p>"
Jupyter,adopt,tools,TRUE,"<p>Over the past couple of years, we've noticed a steady rise in the popularity of analytics notebooks. These are Mathematica-inspired applications that combine text, visualization and code in a living, computational document. <strong><a href=""http://jupyter.org/"">Jupyter</a></strong> Notebooks are widely used by our teams for prototyping and exploration in analytics and machine learning. We've moved Jupyter to Adopt for this issue of the Radar to reflect that it has emerged as the current default for Python notebooks. However, we caution to use <a href=""/radar/techniques/productionizing-jupyter-notebooks"">Jupyter Notebooks in production</a>.</p>"
LocalStack,adopt,tools,TRUE,"<p>One of the challenges of using cloud services is being able to develop and test locally. <strong><a href=""https://github.com/localstack/localstack"">LocalStack</a></strong> solves this problem for <a href=""/radar/platforms/aws"">AWS</a> by providing local <a href=""https://martinfowler.com/bliki/TestDouble.html"">test double</a> implementations of a wide range of AWS services, including S3, Kinesis, DynamoDB and Lambda. It builds on top of best-of-breed tools such as <a href=""https://github.com/mhart/kinesalite"">Kinesalite</a>, <a href=""https://github.com/mhart/dynalite"">dynalite</a> and <a href=""https://github.com/spulec/moto"">Moto</a> and adds isolated processes and error injection functionality. LocalStack is very easy to use, ships with a simple JUnit runner and a JUnit 5 extension and can also run inside a docker container. For many teams, it has become the default for testing services that are deployed on AWS.</p>"
Terraform,adopt,tools,TRUE,"<p><strong><a href=""https://www.terraform.io/"">Terraform</a></strong>, is rapidly becoming a de facto choice for creating and managing cloud infrastructures by writing declarative definitions. The configuration of the servers instantiated by Terraform is usually left to Puppet, Chef or Ansible. We like Terraform because the syntax of its files is quite readable and because it supports a number of cloud providers while making no attempt to provide an artificial abstraction across those providers. The active community will add support for the latest features from most cloud providers. Following our first, more cautious, mention of Terraform almost two years ago, it has seen continued development and has evolved into a stable product with a good ecosystem that has proven its value in our projects. The issue with state file management can now be sidestepped by using what Terraform calls a ""remote state backend."" We've successfully used <a href=""https://aws.amazon.com/s3/"">AWS S3</a> for that purpose.</p>"
UI dev environments,adopt,tools,TRUE,"<p>As more and more teams embrace <a href=""/radar/techniques/designops"">DesignOps</a>, practices and tooling in this space mature. <strong>UI dev environments</strong> provide a comprehensive environment for quickly iterating on UI components, focusing on collaboration between user experience designers and developers. We now have a few options in this space: <a href=""https://storybook.js.org/"">Storybook</a>, <a href=""https://react-styleguidist.js.org/"">React Styleguidist</a>, <a href=""https://compositor.io/"">Compositor</a> and <a href=""https://mdxjs.com/"">MDX</a>. You can use these tools standalone in component library or design system development as well as embedded in a web application project. Many teams were able to decrease their UI feedback cycles and improve timing of UI work in preparation for development work, which has made using UI dev environments a reasonable default for us.</p>"
haos Toolkit,assess,language-and-frameworks,TRUE,"<p>The <strong><a href=""https://chaostoolkit.org/"">Chaos Toolkit</a></strong> is one of a number of <a href=""/radar/techniques/chaos-engineering"">Chaos Engineering</a> tools that made this edition of the Radar. You use the toolkit to describe and then run repeatable experiments on your infrastructure to understand its resilience in the event of failure. Many of our teams have been using homegrown tools to do this, so it's great to see an open-source project dedicated to the practice. The toolkit already has drivers for <a href=""/radar/platforms/aws"">AWS</a>, <a href=""/radar/platforms/azure-service-fabric"">Azure Service Fabric</a> and GCE (among others) and plays nicely with build tools which lets you experiment with automation. The usual caveats apply though, Chaos Engineering is a very powerful technique that is best used on resilience-aware systems, that is, systems that have been built to cope with failure. For that reason, we recommend starting using Chaos Toolkit in your nonproduction environments first.</p>"
Dask,assess,language-and-frameworks,TRUE,"<p>Data scientists and engineers often use libraries such as <a href=""https://pandas.pydata.org/"">pandas</a> to perform ad hoc data analysis. Although expressive and powerful, these libraries have one critical limitation: they only work on a single CPU and don't provide horizontal scalability for large data sets. <a href=""https://dask.org/""><strong>Dask</strong></a>, however, includes a lightweight, high-performance scheduler that can scale from a laptop to a cluster of machines. And because it works with <a href=""http://www.numpy.org/"">NumPy</a>, pandas and <a href=""/radar/tools/scikit-learn"">Scikit-learn</a>, Dask looks promising for further assessment.</p>"
Embark,assess,language-and-frameworks,TRUE,"<p>We've recommended <a href=""/radar/languages-and-frameworks/truffle"">Truffle</a> for <a href=""/radar/techniques/ethereum-for-decentralized-applications"">decentralized application</a> (dapp) development in the past. <strong><a href=""https://embark.status.im/"">Embark</a></strong> too can make your work easier. Embark provides features such as scaffolding, building, testing and debugging and integrates with decentralized storages such as <a href=""/radar/platforms/ipfs"">IPFS</a>. Through its declarative configuration, you can manage <a href=""/radar/techniques/smart-contracts"">smart contract</a> configuration, dependencies, artifact and deployment quite easily. Embark's interactive CLI dashboard is also impressive. We keep seeing people use <a href=""https://remix.ethereum.org"">Remix</a> to write smart contracts and manually deploy their apps without automated testing, source control management or artifact management. We'd like to draw people's attention to dapp engineering practice by promoting tools such as Truffle and Embark.</p>"
fastai,assess,language-and-frameworks,TRUE,"<p><strong><a href=""https://docs.fast.ai/"">fastai</a></strong> is an open-source Python library that simplifies training fast and accurate neural nets. It is built on top of <a href=""/radar/languages-and-frameworks/pytorch"">PyTorch</a> and has become a popular tool for our data scientists. fastai simplifies painful aspects of model training such as preprocessing and loading data down to a few lines of code. It's built on deep learning best practices and has out-of-the-box support for computer vision, natural language processing (NLP) and more. The founders' motivation has been to create an easy-to-use library for deep learning and an improved successor to <a href=""/radar/languages-and-frameworks/keras"">Keras</a>. <a href=""/radar/platforms/google-cloud-platform"">GCP</a>, <a href=""/radar/platforms/aws"">AWS</a> and <a href=""/radar/platforms/azure"">Azure</a> all have already included fastai in their machine images. The creators of fastai, acknowledging the speed and safety limitations of Python, have announced <a href=""https://www.fast.ai/2019/03/06/fastai-swift/"">embracing Swift</a> as an alternative language for deep learning. We'll be closely watching this space.</p>"
http4k,assess,language-and-frameworks,TRUE,"<p><strong><a href=""https://www.http4k.org/"">http4k</a></strong> is an HTTP toolkit written in pure <a href=""/radar/languages-and-frameworks/kotlin"">Kotlin</a> for serving and consuming HTTP services. One of the key ideas behind http4k is that HTTP apps are modelled by composing two simple functions — HttpHandler and Filter. They derive inspiration from Twitter's <a href=""https://monkey.org/%7Emarius/funsrv.pdf"">""Your Server as a Function""</a> paper. It's very lightweight with the core module having no dependencies apart from Kotlin StdLib. Apart from its elegance and simplicity, we also like its emphasis on testability — given that the entities in the libraries are immutable and the routes in the app, as well as the app itself, are just functions, they're super easy to test. One of the things to be aware of, though, is that we don't have nonblocking or coroutines support in http4k yet.</p>"
Immer,assess,language-and-frameworks,TRUE,"<p>With the increasing complexity of single-page JavaScript applications, managing state predictably is becoming more and more important. Immutability can help to ensure our applications behave consistently, but unfortunately JavaScript doesn't natively support the ability to create immutable objects. Libraries such as <a href=""/radar/languages-and-frameworks/immutable-js"">Immutable.js</a> filled that gap but introduced new problems because now two kinds of objects and arrays existed in the application, the library's version and the native JavaScript ones. <strong><a href=""https://github.com/mweststrate/immer"">Immer</a></strong> — German for <em>always</em> — is a tiny package that lets you work with immutable state in a more convenient way. It's based on the copy-on-write mechanism, has a minimal API and operates on normal JavaScript objects and arrays. This means that data access is seamless and no large refactoring efforts are needed when introducing immutability to an existing codebase.</p>"
Karate,assess,language-and-frameworks,TRUE,"<p>Given our experience that tests are the only API specifications that really matter, we're always on the lookout for new tools that might help. <strong><a href=""https://intuit.github.io/karate/"">Karate</a></strong> is an API testing framework whose unique feature is that tests are written directly in Gherkin without relying on a general-purpose programming language to implement test behavior. Karate is really a domain-specific language for describing HTTP-based API tests. Although this approach is interesting and makes for some very readable specifications for simple tests, the special-purpose language for matching and validating payloads can become quite syntax-heavy and difficult to understand. It remains to be seen if more complex tests written in this style will be readable and maintainable over the long haul.</p>"
Deno,assess,platforms,TRUE,"<p>As a group we have mixed feelings about programming in JavaScript on the server side, especially when the rationale for doing so is simply to avoid <a href=""/radar/techniques/polyglot-programming"">polyglot programming</a>. That said, if you decide to use JavaScript or TypeScript on the server, have a look at <strong><a href=""https://deno.land/"">Deno</a></strong>. Written by Ryan Dahl, the inventor of Node.js, Deno aims to avoid what Ryan considers mistakes that were made in Node.js. It brings a strict sandbox system and built-in dependency and package management, and it supports <a href=""/radar/languages-and-frameworks/typescript"">TypeScript</a> out of the box. Deno is built using <a href=""/radar/languages-and-frameworks/rust"">Rust</a> and V8.</p>"
Hot Chocolate,assess,platforms,TRUE,"<p>The <a href=""/radar/languages-and-frameworks/graphql"">GraphQL</a> ecosystem and community keep growing. <strong><a href=""https://hotchocolate.io/"">Hot Chocolate</a></strong> is a GraphQL server for .NET (core and classic). It lets you build and host schemas and then serve queries against them. The team behind Hot Chocolate has recently added schema stitching which allows for a single entry point to query across multiple schemas aggregated from different locations. Although there are plenty of ways to misuse this approach, it's worth assessing whether to add it to your toolkit.</p>"
Knative,assess,platforms,FALSE,"<p>The <a href=""/radar/techniques/serverless-architecture"">serverless architecture</a> has popularized a FaaS style of programming among developers; it helps developers focus on solving core business problems with independently built and deployed functions that react to an event, run a business process, produce other events in the process and scale down to zero. Historically, proprietary serverless platforms such as <a href=""/radar/platforms/aws-lambda"">AWS Lambda</a> or Microsoft <a href=""https://azure.microsoft.com/en-us/services/functions/"">Azure Functions</a> have enabled this programming paradigm. <strong><a href=""https://www.knative.dev/"">Knative</a></strong> is an open-source Kubernetes-based platform to run FaaS workloads. There are few things that stand out about Knative: it's open source and provider agnostic; it implements the serverless workflow as described in the CNCF Serverless Working Group <a href=""https://github.com/cncf/wg-serverless/tree/master/whitepapers/serverless-overview"">whitepaper</a>; it ensures cross-service interoperability by implementing its eventing interface consistent with <a href=""https://github.com/cloudevents/spec/blob/master/spec.md#design-goals"">CNCF CloudEvents</a> specification; and, most importantly, it addresses a common challenge of operating a harmonized and yet hybrid FaaS and long-running container-based architecture. It easily integrates with both <a href=""/radar/platforms/istio"">Istio</a> and <a href=""/radar/platforms/kubernetes"">Kubernetes</a>. For example, developers can take advantage of roll-out strategies that Istio implements by traffic splitting between different revisions of the functions. Developers can take benefit of Istio-provided observability not only for long-running container services but also for FaaS programs in the same Kubernetes environment. We anticipate that Knative open-source eventing interface will continue to enable new underlying source and destination event integrations.</p>"
MinIO,assess,platforms,TRUE,"<p>Object storage is a popular choice for storing unstructured data and in a few cases structured data in the cloud. We do discourage the use of <a href=""/radar/techniques/generic-cloud-usage"">generic cloud</a> but if you want to minimize the risk of cloud stickiness for object storage, we've found <strong><a href=""https://min.io/"">MinIO</a></strong> quite helpful. With an S3-compatible API layer, MinIO abstracts object storage across cloud providers, including <a href=""/radar/platforms/aws"">AWS</a>, <a href=""/radar/platforms/azure"">Azure</a> and <a href=""/radar/platforms/google-cloud-platform"">Google Cloud Platform</a> (GCP), and we've used it successfully in products with flexible target infrastructures from data centers to cloud providers.</p>"
Prophet,assess,platforms,TRUE,"<p>Even in the era of deep learning, statistical models still play a role in business decision support. Time series models are widely used to forecast inventories, demand, customer traffic, and so on. Hand-crafting these models so that they're robust and flexible has typically been the role of either specialized statisticians or large commercial software vendors. <strong><a href=""https://facebook.github.io/prophet/"">Prophet</a></strong> is an open-source alternative to commercial forecasting packages that can be programmed in R or Python. Facebook claims to use Prophet internally for business forecasting at scale and has made it available as an open-source package for anyone to use. We like that Prophet removes some of the tedium of model construction, maintenance and data manipulation so that human analysts and subject matter experts can focus on doing what they do best.</p>"
Quorum,assess,platforms,FALSE,"<p><strong><a href=""https://www.jpmorgan.com/global/Quorum"">Quorum</a></strong> is ""an enterprise-focused version of Ethereum"" that aims to provide network permissioning and transaction privacy as well as higher performance. One of our teams has worked deeply with Quorum; however, their experience so far hasn't been great. Some challenges result from <a href=""/radar/techniques/smart-contracts"">complex smart contract programming</a> and some come from Quorum itself. For example, it doesn't work well with load balancers and only has partial database support, which will lead to significant deployment burden. We faced some stability and compatibility issues especially on private transactions. Quorum recently attracted a lot of attention because of <a href=""https://www.jpmorgan.com/global/news/digital-coin-payments"">JPM Coin</a>. However, from a tech perspective, we recommend being cautious when implementing Quorum while keeping an eye on its development.</p>"
SPIFFE,assess,platforms,FALSE,"<p><strong><a href=""https://spiffe.io/"">SPIFFE</a></strong> standardization of service identity has been an important step in enabling turnkey solutions for end-to-end encryption and mutual authentication between services. The SPIFFE standards are backed by the OSS <a href=""https://github.com/spiffe/spire"">SPIFFE Runtime Environment (SPIRE)</a>, which automatically delivers cryptographically provable identities to services. <a href=""/radar/platforms/istio"">Istio</a> also uses SPIFFE by default. SPIFFE enables many use cases, including identity translation, OAuth client authentication, mTLS ""encryption everywhere"" and workload observability. ThoughtWorks is actively working with the Istio and SPIFFE communities to bridge the gap between legacy service identity providers and SPIFFE-based identities so that mTLS can be used everywhere between services, inside a service mesh and outside.</p>"
Tendermint,assess,platforms,TRUE,"<p><a href=""https://en.wikipedia.org/wiki/Byzantine_fault"">Byzantine fault tolerance (BFT)</a> is one of the fundamental problems in cryptocurrency and blockchain systems. It requires overall system agreement on a single data value in the presence of a number of arbitrary faulty processes, which includes malicious fraud. <strong><a href=""https://www.tendermint.com/"">Tendermint</a></strong> is a BFT state machine replication engine that lets you implement your own blockchain systems. The consensus engine, Tendermint Core, takes over the peer-to-peer communication and consensus part, you just need to implement the rest of the application (e.g., construct transaction and verify cryptographic signature) and communicate with Tendermint Core through <a href=""https://github.com/tendermint/tendermint/tree/master/abci"">ABCI</a>. Some blockchain <a href=""https://tendermint.com/ecosystem"">implementations</a> have already chosen Tendermint as their consensus engine.</p>"
TimescaleDB,assess,platforms,TRUE,"<p>In previous Radars we've discussed <a href=""/radar/platforms/postgresql-for-nosql"">PostgreSQL for NoSQL</a>. PostgreSQL's maturity and extensibility have led to a steady stream of innovative persistence stores built on the Postgres engine. One that caught our attention is <strong><a href=""https://www.timescale.com/"">TimescaleDB</a></strong>, a database that allows fast writes and optimized queries over time-series data. Albeit not (yet) as full-featured as <a href=""/radar/platforms/influxdb"">InfluxDB</a>, TimescaleDB offers an alternative data model and querying capability. You should evaluate TimescaleDB if you have modest scalability needs, prefer to use SQL and appreciate the stability and familiar administrative interface that PostgreSQL offers.</p>"
Four key metrics,adopt,techniques,TRUE,"<p>The thorough <a href=""https://devops-research.com/research.html"">State of DevOps</a> reports have focused on data-driven and statistical analysis of high-performing organizations. The result of this multiyear research, published in <a href=""https://itrevolution.com/book/accelerate/"">Accelerate</a>, demonstrates a direct link between organizational performance and software delivery performance. The researchers have determined that only <strong>four key metrics</strong> differentiate between low, medium and high performers: lead time, deployment frequency, mean time to restore (MTTR) and change fail percentage. Indeed, we've found that these four key metrics are a simple and yet powerful tool to help leaders and teams focus on measuring and improving what matters. A good place to start is to instrument the build pipelines so you can capture the four key metrics and make the software delivery value stream visible. <a href=""https://www.gocd.org/"">GoCD pipelines,</a> for example, provide the ability to measure these four key metrics as a first-class citizen of the <a href=""https://www.gocd.org/analytics.html"">GoCD analytics</a>.</p>"
Micro frontends,adopt,techniques,TRUE,"<p>We've seen significant benefits from introducing <a href=""https://martinfowler.com/articles/microservices.html"">microservices</a>, which have allowed teams to scale the delivery of independently deployed and maintained services. Unfortunately, we've also seen many teams create a frontend monolith — a large, entangled browser application that sits on top of the backend services — largely neutralizing the benefits of microservices. Since we first described <strong>micro frontends</strong> as a technique to address this issue, we've had almost universally positive experiences with the approach and have found a number of patterns to use micro frontends even as more and more code shifts from the server to the web browser. So far, <a href=""/radar/platforms/web-components-standard"">web components</a> have been elusive in this field, though.</p>"
Opinionated and automated code formatting,adopt,techniques,TRUE,"<p>For as long as we can remember, what style to use for formatting code has been a matter of personal taste, company policy and heated debate. Finally, the industry appears to be tiring of this endless argument and teams are freeing up surprisingly large amounts of time by forgoing these discussions and just adopting <strong>opinionated and automated code formatting</strong> tools. Even if you don't agree 100% with the opinions of the various tools, the benefits of focusing on what your code does rather than how it looks is something most teams should be able to get behind. <a href=""/radar/tools/prettier"">Prettier</a> has been getting our vote for JavaScript, but similar tools, such as <a href=""https://github.com/ambv/black"">Black</a> for Python, are available for many other languages and are increasingly being built-in as we see with <a href=""https://golang.org/cmd/gofmt/"">Golang</a> and <a href=""https://elixir-lang.org/blog/2018/01/17/elixir-v1-6-0-released/"">Elixir</a>. The key here is not to spend hours discussing which rules to enforce, but instead pick a tool that is opinionated, minimally configurable and automated — ideally as a pre-commit hook.</p>"
Polyglot programming,adopt,techniques,TRUE,"<p>We put <strong>polyglot programming</strong> on Trial in one of our first Radars to suggest that choosing the right language for the job could significantly boost productivity, and there were new language entrants that were worthy of consideration. We want to reraise this suggestion because we're seeing a new push to standardize language stacks by both developers and enterprises. While we acknowledge that placing no restrictions on language uses can create more problems than it solves, promoting a few languages that support different ecosystems or language features is important for both enterprises to accelerate processes and go live more quickly and developers to have the right tools to solve the problem at hand.</p>"
Secrets as a service,adopt,techniques,TRUE,"<p>Humans and machines use secrets throughout the value stream of building and operating software. The build pipelines need secrets to interface with secure infrastructures such as container registries, the applications use API keys as secrets to get access to business capabilities, and the service-to-service communications are secured using certificates and keys as secrets. You can set and retrieve these secrets in different ways. We've long cautioned developers about using source code management for storing secrets. We've recommended <a href=""/radar/techniques/decoupling-secret-management-from-source-code"">decoupling secret management from source code</a> and using tools such as <a href=""/radar/tools/git-secrets"">git-secrets</a> and <a href=""/radar/tools/talisman"">Talisman</a> to avoid storing secrets in the source code. We've been using <strong>secrets as a service</strong> as a default technique for storing and accessing secrets. With this technique you can use tools such as <a href=""/radar/tools/hashicorp-vault"">Vault</a> or <a href=""https://aws.amazon.com/kms/"">AWS Key Management Service (KMS)</a> to read/write secrets over an HTTPS endpoint with fine-grained levels of access control. Secrets as a service uses external identity providers such as <a href=""https://aws.amazon.com/iam/"">AWS IAM</a> to identify the actors who request access to secrets. Actors authenticate themselves with the secrets service. For this process to work, it's important to automate bootstrapping the identity of the actors, services and applications. Platforms based on <a href=""/radar/platforms/spiffe"">SPIFFE</a> have improved the automation of assigning identities to services.</p>"
Chaos Engineering,trial,techniques,FALSE,"<p>In the last year we've seen <strong>Chaos Engineering</strong> move from a much talked-about idea to an accepted, mainstream approach to improving and assuring distributed system resilience. As organizations large and small begin to implement Chaos Engineering as an operational process, we're learning how to apply these techniques safely at scale. The approach is definitely not for everyone, and to be effective and safe, it requires organizational support at scale. Industry acceptance and available expertise will definitely increase with the appearance of commercial services such as <a href=""/radar/tools/gremlin"">Gremlin</a> and deployment tools such as <a href=""/radar/tools/spinnaker"">Spinnaker</a> implementing some Chaos Engineering tools.</p>"
Container security scanning,trial,techniques,TRUE,"<p>The container revolution around <a href=""/radar/platforms/docker"">Docker</a> has massively reduced the friction in moving applications between environments, fueling increased adoption of continuous delivery and continuous deployments. The latter, especially, has blown a rather large hole in the traditional controls over what can go to production. The technique of <strong>container security scanning</strong> is a necessary response to this threat vector. Tools in the build pipeline automatically check containers flowing through the pipeline against known vulnerabilities. Since our first mention of this technique, the tool landscape has matured and the technique has proven useful on development efforts with our clients.</p>"
Continuous delivery for machine learning (CD4ML) models,trial,techniques,TRUE,"<p><strong>Continuous delivery for machine learning (CD4ML) models</strong> apply continuous delivery practices to developing machine learning models so that they are always ready for production. This technique addresses two main problems of traditional machine learning model development: long cycle time between training models and deploying them to production, which often includes manually converting the model to production-ready code; and using production models that had been trained with stale data.</p>
